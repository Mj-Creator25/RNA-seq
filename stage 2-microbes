#!/bin/bash
# ==========================================================
# Transcriptomic Profiling of S. aureus (Acute vs Chronic PJI)
# End-to-end RNA-seq pipeline with STAR + DESeq2
# ==========================================================

# -----------------------------
# 1. Create clean working folder
# -----------------------------
mkdir -p clean_files
cd clean_files

# -----------------------------
# 2. Download raw sequencing reads
# -----------------------------
# SRR20959676â€“83 (paired-end fastq from SRA)

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/076/SRR20959676/SRR20959676_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/076/SRR20959676/SRR20959676_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/077/SRR20959677/SRR20959677_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/077/SRR20959677/SRR20959677_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/078/SRR20959678/SRR20959678_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/078/SRR20959678/SRR20959678_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/079/SRR20959679/SRR20959679_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/079/SRR20959679/SRR20959679_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/080/SRR20959680/SRR20959680_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/080/SRR20959680/SRR20959680_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/081/SRR20959681/SRR20959681_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/081/SRR20959681/SRR20959681_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/082/SRR20959682/SRR20959682_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/082/SRR20959682/SRR20959682_2.fastq.gz

wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/083/SRR20959683/SRR20959683_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR209/083/SRR20959683/SRR20959683_2.fastq.gz

# -----------------------------
# 3. Quality control
# -----------------------------
mkdir -p qc_temp
fastqc -o qc_temp/ *.fastq.gz
ls -lh qc_temp/

# -----------------------------
# 4. Trimming with fastp
# -----------------------------
mkdir -p trimmed qc_reports

for sample in SRR20959676 SRR20959677 SRR20959678 SRR20959679 SRR20959680 SRR20959681 SRR20959682 SRR20959683; do
  fastp \
    -i ${sample}_1.fastq.gz \
    -I ${sample}_2.fastq.gz \
    -o trimmed/${sample}_1.trimmed.fastq.gz \
    -O trimmed/${sample}_2.trimmed.fastq.gz \
    -h qc_reports/${sample}_fastp.html \
    -j qc_reports/${sample}_fastp.json \
    -w 4
done

# -----------------------------
# 5. Download Reference Genome (USA300 FPR3757)
# -----------------------------
mkdir -p genome

# FASTA
wget -O genome/s_aureus_USA300.fa.gz \
  ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/013/465/GCF_000013465.1_ASM1346v1/GCF_000013465.1_ASM1346v1_genomic.fna.gz

# GTF annotation (for featureCounts)
wget -O genome/s_aureus_USA300.gtf.gz \
  ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/013/465/GCF_000013465.1_ASM1346v1/GCF_000013465.1_ASM1346v1_genomic.gtf.gz

# Optional GFF3 (for IGV / browsers)
wget -O genome/s_aureus_USA300.gff3.gz \
  ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/013/465/GCF_000013465.1_ASM1346v1/GCF_000013465.1_ASM1346v1_genomic.gff.gz

# Unzip
gunzip -f genome/*.gz

# -----------------------------
# 6. Build STAR index
# -----------------------------

GENOME_DIR=genome
FASTA=genome/s_aureus_USA300.fa

mkdir -p $GENOME_DIR

STAR --runThreadN 4 \
     --runMode genomeGenerate \
     --genomeDir $GENOME_DIR \
     --genomeFastaFiles $FASTA \
     --sjdbGTFfile genome/s_aureus_USA300.gtf \
     --sjdbOverhang 149   # (read length - 1, for 150bp reads; adjust if different)


echo "STAR genome index built successfully in $GENOME_DIR"
# -----------------------------
# 7. Alignment with STAR
# -----------------------------

GENOME_DIR=genome
READ_DIR=trimmed
OUT_DIR=star_output

mkdir -p $OUT_DIR

for sample in $(ls $READ_DIR/*_1.trimmed.fastq.gz | sed 's/_1.trimmed.fastq.gz//'); do
    base=$(basename $sample)
    echo "Running STAR for $base..."
    
    STAR --runThreadN 4 \
         --genomeDir $GENOME_DIR \
         --readFilesIn ${READ_DIR}/${base}_1.trimmed.fastq.gz ${READ_DIR}/${base}_2.trimmed.fastq.gz \
         --readFilesCommand zcat \
         --outFileNamePrefix ${OUT_DIR}/${base}_ \
         --outSAMtype BAM SortedByCoordinate

    echo "Finished alignment for $base"
done

#preparation for R
#download count .txt file to local computer(run on local terminal)
scp teameinstein@135.181.163.242:~/Majoka/clean_files/counts_featureCounts.txt ~/Majoka/IGV/
scp teameinstein@135.181.163.242:~/Majoka/clean_files/counts_featureCounts.txt.summary ~/Majoka/IGV/

# -----------------------------
# R Analysis in RStudio
# -----------------------------

# Load libraries
library(DESeq2)
library(pheatmap)
library(ggplot2)

# Set working directory
setwd("/Users/gontlekehumile/Majoka/IGV")

# Read featureCounts table
s_a_count <- read.delim('counts_featureCounts.txt', header = TRUE, comment.char = "#")

# Extract raw counts (usually start at 7th column in featureCounts output)
raw_counts <- s_a_count[,7:ncol(s_a_count)]
rownames(raw_counts) <- s_a_count$Geneid

# Load metadata
s_a_meta <- read.delim('metadata.csv', header = TRUE)
rownames(s_a_meta) <- s_a_meta$Sample

# Ensure column names of raw_counts match sample IDs
colnames(raw_counts) <- sub(".bam","",colnames(raw_counts)) # remove bam suffix if present

# Build DESeq2 object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
                              colData = s_a_meta,
                              design = ~ State)

# Prefilter low counts
dds <- dds[rowSums(counts(dds)) > 10, ]

# Run DESeq2
dds <- DESeq(dds)

# Get results (Acute vs Chronic)
final_res <- results(dds, contrast = c("State","Acute PJI","Chronic PJI"))

# Separate DEGs
upregulated <- subset(final_res, pvalue < 0.05 & log2FoldChange > 1)
downregulated <- subset(final_res, pvalue < 0.05 & log2FoldChange < -1)

# Save outputs
write.csv(upregulated, "upregulated_PJI.csv")
write.csv(downregulated, "downregulated_PJI.csv")
write.csv(raw_counts, "raw_counts_PJI.csv")

# Volcano plot
png("volcano_plot_PJI.png", width = 1200, height = 1000, res = 150)
plot(final_res$log2FoldChange, -log10(final_res$pvalue),
     pch = 19, col = "grey", cex = 0.4,
     xlab = "Log2 Fold Change", ylab = "-log10(p-value)")
abline(v=c(-1,1), h=-log10(0.05), lty=2)
points(upregulated$log2FoldChange, -log10(upregulated$pvalue), col="salmon", pch=19)
points(downregulated$log2FoldChange, -log10(downregulated$pvalue), col="lightblue", pch=19)
mtext("Volcano Plot: Acute vs Chronic PJI")
dev.off()

# Heatmap
degs <- rbind(raw_counts[rownames(upregulated),],
              raw_counts[rownames(downregulated),])
pheatmap(degs, cluster_rows=TRUE, cluster_cols=TRUE, scale="row")

# PCA
vsd <- vst(dds, blind=FALSE)
pca_data <- plotPCA(vsd, intgroup="State", returnData=TRUE)
percentVar <- round(100 * attr(pca_data,"percentVar"))
ggplot(pca_data, aes(PC1, PC2, color=State)) +
  geom_point(size=4) +
  xlab(paste0("PC1: ",percentVar[1],"%")) +
  ylab(paste0("PC2: ",percentVar[2],"%")) +
  ggtitle("PCA of PJI Samples") +
  theme_minimal()
ggsave("PCA_PJI_Acute_vs_Chronic.png", width=8, height=6, dpi=150)
